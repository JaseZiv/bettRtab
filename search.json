[{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting TAB betting data using bettRtab","text":"vignette outline ways functions bettRtab can used extract sports racing betting data TAB.","code":""},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting TAB betting data using bettRtab","text":"can install released version bettRtab GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"JaseZiv/bettRtab\") library(bettRtab) library(dplyr)"},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Getting TAB betting data using bettRtab","text":"functions package work without hitch locally, running automated way (GitHub Actions, cloud, etc) may lead requests blocked. get around , need access proxies need set configs start scripts similar following:","code":"httr::set_config(httr::use_proxy(url = Sys.getenv(\"PROXY_URL\"),                                  port = as.numeric(Sys.getenv(\"PROXY_PORT\")),                                  username =Sys.getenv(\"PROXY_USERNAME\"),                                  password= Sys.getenv(\"PROXY_PASSWORD\")))"},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"sports-data","dir":"Articles","previous_headings":"","what":"Sports Data","title":"Getting TAB betting data using bettRtab","text":"get betting data currently available competition market, use get_sports_market() function. get valid list values can pass competition_name parameter, look competitions.name column file . Alternatively, competition_name needed argument function can found competitions page selector TAB website. can inspect see betting markets available: can explore key markets… say want see odds relegation EPL:","code":"epl_futures <- get_sports_market(competition_name = \"English Premier League Futures\")  glimpse(epl_futures) #> Rows: 238 #> Columns: 33 #> $ marketId            <chr> \"68519348\", \"68519348\", \"68519348\", \"68519348\", \"6… #> $ marketName          <chr> \"EPL Winner 2022/23\", \"EPL Winner 2022/23\", \"EPL W… #> $ shortName           <chr> \"EPL Winner 2022/23\", \"EPL Winner 2022/23\", \"EPL W… #> $ betOption           <chr> \"Winner\", \"Winner\", \"Winner\", \"Winner\", \"Winner\", … #> $ betOptionSpectrumId <chr> \"52\", \"52\", \"52\", \"52\", \"52\", \"52\", \"52\", \"52\", \"5… #> $ betOptionPriority   <chr> \"90\", \"90\", \"90\", \"90\", \"90\", \"90\", \"90\", \"90\", \"9… #> $ marketUniqueId      <chr> \"68519348\", \"68519348\", \"68519348\", \"68519348\", \"6… #> $ closeTime           <chr> \"2022-10-01T11:30:00.000Z\", \"2022-10-01T11:30:00.0… #> $ marketBettingStatus <chr> \"Open\", \"Open\", \"Open\", \"Open\", \"Open\", \"Open\", \"O… #> $ isFuture            <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ onlineBetting       <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ phoneBettingOnly    <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ inPlay              <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ goingInPlay         <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ allowWin            <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ marketAllowPlace    <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ allowEachWay        <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ allowMulti          <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ allowMultiWin       <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ allowMultiPlace     <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ allowMultiEachWay   <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ numberOfPlaces      <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", … #> $ cashOutEligibility  <chr> \"Enabled\", \"Enabled\", \"Enabled\", \"Enabled\", \"Enabl… #> $ allowBundle         <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ id                  <chr> \"278385\", \"278386\", \"278390\", \"278389\", \"278388\", … #> $ name                <chr> \"Man City\", \"Liverpool\", \"Arsenal\", \"Tottenham\", \"… #> $ returnWin           <chr> \"1.32\", \"8\", \"11\", \"15\", \"34\", \"34\", \"201\", \"251\",… #> $ returnPlace         <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", … #> $ bettingStatus       <chr> \"Open\", \"Open\", \"Open\", \"Open\", \"Open\", \"Open\", \"O… #> $ allowPlace          <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ number              <chr> \"278385\", \"278386\", \"278390\", \"278389\", \"278388\", … #> $ isOpen              <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ sortOrder           <chr> \"1\", \"2\", \"6\", \"5\", \"4\", \"3\", \"10\", \"7\", \"16\", \"18… epl_futures %>%    select(betOption) %>% distinct() #>                              betOption #> 1                               Winner #> 2                      Top Goal Scorer #> 3                                Top 4 #> 4                           Relegation #> 5                                Top 2 #> 6                                Top 6 #> 7                   To Finish Top Half #> 8                  Team to Finish Last #> 9  Winner without Liverpool & Man City #> 10                Winner without Big 6 epl_futures %>%    filter(betOption == \"Relegation\") %>%    select(marketName, id, name, returnWin) #>                marketName     id              name returnWin #> 1  EPL Relegation 2022/23 228287       Bournemouth       1.5 #> 2  EPL Relegation 2022/23 228288 Nottingham Forest      1.55 #> 3  EPL Relegation 2022/23 228279         Leicester       2.8 #> 4  EPL Relegation 2022/23 228285       Southampton      3.25 #> 5  EPL Relegation 2022/23 228278           Everton      3.75 #> 6  EPL Relegation 2022/23 228277     Wolverhampton         4 #> 7  EPL Relegation 2022/23 228286             Leeds       5.5 #> 8  EPL Relegation 2022/23 228282         Brentford       5.5 #> 9  EPL Relegation 2022/23 228284            Fulham         6 #> 10 EPL Relegation 2022/23 228283       Aston Villa         8 #> 11 EPL Relegation 2022/23 228280    Crystal Palace         9 #> 12 EPL Relegation 2022/23 228275          West Ham        13 #> 13 EPL Relegation 2022/23 228281          Brighton        34 #> 14 EPL Relegation 2022/23 228276         Newcastle        41 #> 15 EPL Relegation 2022/23 228272           Man Utd       151 #> 16 EPL Relegation 2022/23 228271           Chelsea       501 #> 17 EPL Relegation 2022/23 228274           Arsenal      1001 #> 18 EPL Relegation 2022/23 228270         Liverpool      1001 #> 19 EPL Relegation 2022/23 228273         Tottenham      1501 #> 20 EPL Relegation 2022/23 228269          Man City      3001"},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"live-in-play-sports","dir":"Articles","previous_headings":"Sports Data","what":"Live (In-Play) Sports","title":"Getting TAB betting data using bettRtab","text":"get live -play sports markets ’re played, get_live_sports() function used. return data frame sports -play market. user can filter outputted data frame variables data set (name, displayName, competitions.id, competitions.matches.name, etc).","code":"live_sports <- get_live_sports() dplyr::glimpse(live_sports)"},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"racing-data","dir":"Articles","previous_headings":"","what":"Racing Data","title":"Getting TAB betting data using bettRtab","text":"sections outline functions available extract Horse, Harness Greyhound racing.","code":""},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"past-racing-data","dir":"Articles","previous_headings":"Racing Data","what":"Past Racing Data","title":"Getting TAB betting data using bettRtab","text":"following section outline use functions get racing data (horses, harness racing greyhounds) past races run. section include functions get current day future racing data.","code":""},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"race-meet-meta-data","dir":"Articles","previous_headings":"Racing Data > Past Racing Data","what":"Race Meet Meta Data","title":"Getting TAB betting data using bettRtab","text":"get meta data race meets selected date(s), use get_race_meet_meta() function. output function return meet(s) , weather track condition, high level data races meets. Loading Data Rather scraping information, can instead use load_race_meet_meta() function. allow get whole year’s worth race meet meta data extremely quickly. data updates daily, rarely previous day’s race meet data:","code":"dates <- seq(from = as.Date(\"2022-05-01\"), to=as.Date(\"2022-05-03\"), by=1) race_meets <- get_race_meet_meta(race_dates=dates)  glimpse(race_meets) #> Rows: 134 #> Columns: 11 #> $ meetingName      <chr> \"BENDIGO\", \"SWAN HILL\", \"SANDOWN PARK\", \"HEALESVILLE\"… #> $ location         <chr> \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"NSW\", \"NSW… #> $ venueMnemonic    <chr> \"M\", \"M\", \"M\", \"E\", \"P\", \"P\", \"C\", \"C\", \"S\", \"S\", \"S\"… #> $ raceType         <chr> \"R\", \"H\", \"G\", \"G\", \"R\", \"G\", \"R\", \"G\", \"R\", \"H\", \"G\"… #> $ meetingDate      <chr> \"2022-05-01\", \"2022-05-01\", \"2022-05-01\", \"2022-05-01… #> $ weatherCondition <chr> \"FINE\", \"FINE\", \"OCAST\", \"OCAST\", \"FINE\", \"OCAST\", \"S… #> $ trackCondition   <chr> \"HVY8\", \"GOOD\", \"GOOD\", \"GOOD\", \"SOFT6\", \"GOOD\", \"HVY… #> $ exoticPools      <list> [<data.frame[13 x 6]>], [<data.frame[12 x 6]>], [<da… #> $ X_links          <df[,1]> <data.frame[26 x 1]> #> $ races            <list> [<data.frame[8 x 10]>], [<data.frame[7 x 10]>], [<… #> $ sellCode         <df[,2]> <data.frame[26 x 2]> loaded_race_meets <- load_race_meet_meta(cal_year=2022) glimpse(loaded_race_meets) #> Rows: 12,145 #> Columns: 11 #> $ meetingName      <chr> \"FLEMINGTON\", \"ECHUCA\", \"THE MEADOWS\", \"MORNINGTON\", … #> $ location         <chr> \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"NSW\", \"NSW… #> $ venueMnemonic    <chr> \"M\", \"M\", \"M\", \"C\", \"E\", \"P\", \"L\", \"C\", \"C\", \"T\", \"S\"… #> $ raceType         <chr> \"R\", \"H\", \"G\", \"R\", \"R\", \"G\", \"G\", \"R\", \"G\", \"G\", \"R\"… #> $ meetingDate      <chr> \"2022-01-01\", \"2022-01-01\", \"2022-01-01\", \"2022-01-01… #> $ weatherCondition <chr> \"FINE\", \"FINE\", \"FINE\", \"FINE\", \"FINE\", \"OCAST\", \"FIN… #> $ trackCondition   <chr> \"GOOD4\", \"GOOD\", \"GOOD\", \"GOOD3\", \"FIRM2\", \"GOOD\", \"G… #> $ exoticPools      <list> [<data.frame[14 x 6]>], [<data.frame[15 x 6]>], [<da… #> $ X_links          <df[,1]> <data.frame[26 x 1]> #> $ races            <list> [<data.frame[9 x 10]>], [<data.frame[10 x 10]>], [… #> $ sellCode         <df[,2]> <data.frame[26 x 2]>"},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"each-race-data","dir":"Articles","previous_headings":"Racing Data","what":"Each Race Data","title":"Getting TAB betting data using bettRtab","text":"get detailed data runners, markets, pools dividends, following set functions used. Past Race data output get_past_races() function allow pass values four parameters list races outputted. result function stored use parsing functions explained shortly. race_num value can left function call default returning races card’s meet. race_type value needs either ‘R’, ‘H’ ‘G’. rest parameters can multiple arguments passed . Alternatively, can get data using TAB race API URL. get URL, follow steps:","code":"race_list_output <- get_past_races(meet_date = c('2022-09-03', '2022-09-10'), venue_mnem = 'M', race_type = 'R', race_num = c(8:9)) # first load in meet data meets <- load_race_meet_meta(cal_year = 2022)  # then filter to the race(s) meets wanted meet_dates_df <- meets %>%    filter(venueMnemonic == \"M\",           raceType == \"R\",           meetingDate == \"2022-01-01\")  # then get the URLs meet_url <- meet_dates_df$races[[1]] meet_url <- meet_url$`_links`$self[1]  # finally, running the function: race_list_output <- get_past_race_content(urls = meet_url)"},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"parsing-race-data","dir":"Articles","previous_headings":"Racing Data","what":"Parsing Race Data","title":"Getting TAB betting data using bettRtab","text":"easily get data want, parsing functions created operate stored outputs either get_past_races() get_past_race_content(). Parse runners betting market get race’s runners betting odds, use parse_runners() function: Parse pools get race’s betting pools, use parse_pools() function: Parse dividends get race’s dividends, use parse_dividends() function:","code":"runners <- parse_runners(race_list = race_list_output) glimpse(runners) #> Rows: 61 #> Columns: 34 #> $ meetingDate                 <chr> \"2022-09-03\", \"2022-09-03\", \"2022-09-03\", … #> $ location                    <chr> \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", … #> $ meetingName                 <chr> \"MOONEE VALLEY\", \"MOONEE VALLEY\", \"MOONEE … #> $ raceType                    <chr> \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R… #> $ venueMnemonic               <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M… #> $ raceNumber                  <chr> \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8… #> $ raceName                    <chr> \"DRUMMOND GOLF HANDICAP\", \"DRUMMOND GOLF H… #> $ raceStartTime               <chr> \"2022-09-03T06:50:00+00:00\", \"2022-09-03T0… #> $ raceStatus                  <chr> \"Paying\", \"Paying\", \"Paying\", \"Paying\", \"P… #> $ raceDistance                <chr> \"1600\", \"1600\", \"1600\", \"1600\", \"1600\", \"1… #> $ resultedTime                <chr> \"2022-09-03T06:53:24+00:00\", \"2022-09-03T0… #> $ substitute                  <chr> \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5… #> $ raceClassConditions         <chr> \"OPEN\", \"OPEN\", \"OPEN\", \"OPEN\", \"OPEN\", \"O… #> $ winBook                     <chr> \"http://internal-aviato-lb-212286492.ap-so… #> $ scratchings                 <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1… #> $ skyRacingAudio              <chr> \"https://mediatabs.skyracing.com.au/Audio_… #> $ runnerName                  <chr> \"JOHNNY GET ANGRY\", \"DARK DREAM\", \"SO SI B… #> $ runnerNumber                <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3… #> $ finishingPosition           <int> 0, 0, 3, 0, 2, 1, 0, 0, 4, 0, 0, 0, 0, 2, … #> $ trainerName                 <chr> \"DENIS PAGAN\", \"BEN & JD HAYES\", \"BEN & JD… #> $ barrierNumber               <int> 11, 2, 3, 6, 5, 7, 10, 4, 8, 1, 9, 9, 16, … #> $ riderDriverName             <chr> \"LACHLAN KING\", \"LAURA LAFFERTY\", \"LUKE NO… #> $ claimAmount                 <dbl> -1.0, 3.0, -1.0, 2.0, -1.0, -1.0, -1.0, -1… #> $ fixedOdds.returnWin         <dbl> 151.0, 31.0, 10.0, 23.0, 2.5, 3.4, 26.0, 2… #> $ fixedOdds.returnWinOpen     <dbl> 81.0, 13.0, 12.0, 17.0, 3.0, 3.7, 13.0, 21… #> $ fixedOdds.returnPlace       <dbl> 22.00, 6.00, 2.60, 4.60, 1.30, 1.45, 5.00,… #> $ fixedOdds.bettingStatus     <chr> \"LateScratched\", \"Loser\", \"Placing\", \"Lose… #> $ fixedOdds.winDeduction      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ fixedOdds.placeDeduction    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ fixedOdds.propositionNumber <int> 159951, 159952, 159953, 159954, 159955, 15… #> $ fixedOdds.scratchedTime     <chr> \"2022-09-01T21:29:32+00:00\", NA, NA, NA, N… #> $ parimutuel.bettingStatus    <chr> \"Scratched\", \"Normal\", \"Normal\", \"Normal\",… #> $ parimutuel.returnWin        <dbl> 0.0, 33.2, 10.1, 21.4, 2.5, 3.3, 21.2, 24.… #> $ parimutuel.returnPlace      <dbl> 0.0, 6.3, 2.2, 4.7, 1.3, 1.5, 4.4, 5.2, 2.… pools <- parse_pools(race_list = race_list_output) glimpse(pools) #> Rows: 120 #> Columns: 25 #> $ meetingDate         <chr> \"2022-09-03\", \"2022-09-03\", \"2022-09-03\", \"2022-09… #> $ location            <chr> \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"… #> $ meetingName         <chr> \"MOONEE VALLEY\", \"MOONEE VALLEY\", \"MOONEE VALLEY\",… #> $ raceType            <chr> \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", … #> $ venueMnemonic       <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", … #> $ raceNumber          <chr> \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", … #> $ raceName            <chr> \"DRUMMOND GOLF HANDICAP\", \"DRUMMOND GOLF HANDICAP\"… #> $ raceStartTime       <chr> \"2022-09-03T06:50:00+00:00\", \"2022-09-03T06:50:00+… #> $ raceStatus          <chr> \"Paying\", \"Paying\", \"Paying\", \"Paying\", \"Paying\", … #> $ raceDistance        <chr> \"1600\", \"1600\", \"1600\", \"1600\", \"1600\", \"1600\", \"1… #> $ resultedTime        <chr> \"2022-09-03T06:53:24+00:00\", \"2022-09-03T06:53:24+… #> $ substitute          <chr> \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", … #> $ raceClassConditions <chr> \"OPEN\", \"OPEN\", \"OPEN\", \"OPEN\", \"OPEN\", \"OPEN\", \"O… #> $ winBook             <chr> \"http://internal-aviato-lb-212286492.ap-southeast-… #> $ scratchings         <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", … #> $ skyRacingAudio      <chr> \"https://mediatabs.skyracing.com.au/Audio_Replay/2… #> $ poolStatusCode      <chr> \"Paying\", \"Paying\", \"Paying\", \"Paying\", \"Paying\", … #> $ wageringProduct     <chr> \"OddsAndEvens\", \"Win\", \"Place\", \"Quinella\", \"Exact… #> $ poolTotal           <dbl> 57.00, 199653.25, 72917.28, 41096.61, 14199.70, 39… #> $ jackpot             <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ poolCloseTime       <chr> \"2022-09-03T06:50:19+00:00\", \"2022-09-03T06:50:19+… #> $ mergePool           <list> \"Quinella\", <NULL>, <NULL>, \"OddsAndEvens\", <NULL… #> $ mergePoolTotal      <dbl> 41153.61, NA, NA, 41153.61, NA, NA, 93090.12, 9309… #> $ legNumber           <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 1, 2, 1, 2,… #> $ startTime           <chr> \"2022-09-03T06:50:00+00:00\", \"2022-09-03T06:50:00+… dividends <- parse_dividends(race_list = race_list_output) glimpse(dividends) #> Rows: 66 #> Columns: 24 #> $ meetingDate         <chr> \"2022-09-03\", \"2022-09-03\", \"2022-09-03\", \"2022-09… #> $ location            <chr> \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"VIC\", \"… #> $ meetingName         <chr> \"MOONEE VALLEY\", \"MOONEE VALLEY\", \"MOONEE VALLEY\",… #> $ raceType            <chr> \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", … #> $ venueMnemonic       <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", … #> $ raceNumber          <chr> \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", \"8\", … #> $ raceName            <chr> \"DRUMMOND GOLF HANDICAP\", \"DRUMMOND GOLF HANDICAP\"… #> $ raceStartTime       <chr> \"2022-09-03T06:50:00+00:00\", \"2022-09-03T06:50:00+… #> $ raceStatus          <chr> \"Paying\", \"Paying\", \"Paying\", \"Paying\", \"Paying\", … #> $ raceDistance        <chr> \"1600\", \"1600\", \"1600\", \"1600\", \"1600\", \"1600\", \"1… #> $ resultedTime        <chr> \"2022-09-03T06:53:24+00:00\", \"2022-09-03T06:53:24+… #> $ substitute          <chr> \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", … #> $ raceClassConditions <chr> \"OPEN\", \"OPEN\", \"OPEN\", \"OPEN\", \"OPEN\", \"OPEN\", \"O… #> $ winBook             <chr> \"http://internal-aviato-lb-212286492.ap-southeast-… #> $ scratchings         <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", … #> $ skyRacingAudio      <chr> \"https://mediatabs.skyracing.com.au/Audio_Replay/2… #> $ poolStatusCode      <chr> \"Paying\", \"Paying\", \"Paying\", \"Paying\", \"Paying\", … #> $ wageringProduct     <chr> \"OddsAndEvens\", \"Win\", \"Place\", \"Place\", \"Place\", … #> $ jackpotCarriedOver  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ poolCloseTime       <chr> \"2022-09-03T06:50:19+00:00\", \"2022-09-03T06:50:19+… #> $ mergePool           <list> \"Quinella\", <NULL>, <NULL>, <NULL>, <NULL>, \"Odds… #> $ mergePoolTotal      <dbl> 41153.61, NA, NA, NA, NA, 41153.61, NA, NA, NA, NA… #> $ selections          <list> \"SPLIT\", 6, 6, 5, 3, <6, 5>, <6, 5>, <6, 5>, <6, … #> $ amount              <dbl> 1.5, 3.3, 1.5, 1.3, 2.2, 3.6, 6.8, 2.1, 5.0, 4.2, …"},{"path":"https://jaseziv.github.io/bettRtab/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jason Zivkovic. Author, maintainer, copyright holder.","code":""},{"path":"https://jaseziv.github.io/bettRtab/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zivkovic J (2022). bettRtab: API wrapper interact betting company TAB. https://github.com/JaseZiv/bettRtab, https://jaseziv.github.io/bettRtab/.","code":"@Manual{,   title = {bettRtab: API wrapper to interact with the betting company TAB},   author = {Jason Zivkovic},   year = {2022},   note = {https://github.com/JaseZiv/bettRtab, https://jaseziv.github.io/bettRtab/}, }"},{"path":[]},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"API wrapper to interact with the betting company TAB","text":"package designed allow users obtain clean tidy TAB betting markets racing sports. gives users ability access data efficiently.","code":""},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"future-plans","dir":"","previous_headings":"Overview","what":"Future Plans","title":"API wrapper to interact with the betting company TAB","text":"hope expand allow interacting betting API - potentially giving users ability place bets API. , ’m still waiting TAB Digital Team respond request access token able test functions.","code":""},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"API wrapper to interact with the betting company TAB","text":"can install released version bettRtab GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"JaseZiv/bettRtab\") library(bettRtab)"},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"API wrapper to interact with the betting company TAB","text":"functions package work without hitch locally, running automated way (GitHub Actions, cloud, etc) may lead requests blocked. get around , need access proxies need set configs start scripts similar following:","code":"httr::set_config(httr::use_proxy(url = Sys.getenv(\"PROXY_URL\"),                                  port = as.numeric(Sys.getenv(\"PROXY_PORT\")),                                  username =Sys.getenv(\"PROXY_USERNAME\"),                                  password= Sys.getenv(\"PROXY_PASSWORD\")))"},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"how-to","dir":"","previous_headings":"Usage","what":"How To","title":"API wrapper to interact with the betting company TAB","text":"get better understanding use library, see package vignette ","code":""},{"path":[]},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"issues-and-improvements","dir":"","previous_headings":"Contributing","what":"Issues and Improvements","title":"API wrapper to interact with the betting company TAB","text":"creating issue, please include: Reproducible examples brief description expected results improvement suggestions, features requested purpose Feel free get touch via email twitter https://twitter.com/jaseziv aren’t able create issue.","code":""},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"show-your-support","dir":"","previous_headings":"Contributing","what":"Show your support","title":"API wrapper to interact with the betting company TAB","text":"Follow Twitter (jaseziv) updates package helps , ask star repo","code":""},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"API wrapper to interact with the betting company TAB","text":"Image used logo comes shutterstock","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_live_sports.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all in-play sports markets — get_live_sports","title":"Get all in-play sports markets — get_live_sports","text":"Returns currently running -play betting markets","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_live_sports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all in-play sports markets — get_live_sports","text":"","code":"get_live_sports()"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_live_sports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all in-play sports markets — get_live_sports","text":"returns dataframe -play bets available currently","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_live_sports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all in-play sports markets — get_live_sports","text":"","code":"if (FALSE) { try({ df <- get_live_sports() }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Get past race content (with URL) — get_past_race_content","title":"Get past race content (with URL) — get_past_race_content","text":"Returns list race's data including runners, markets, dividends pools Can either use function provide race API URL, use get_past_races get results. Note can return results multiple race meet URL time. See vignette example details get race API URLs. Can use parsing functions get data want lists.","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get past race content (with URL) — get_past_race_content","text":"","code":"get_past_race_content(urls)"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get past race content (with URL) — get_past_race_content","text":"urls API url character race needed","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get past race content (with URL) — get_past_race_content","text":"returns list race's data including runners, markets, dividends pools","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get past race content (with URL) — get_past_race_content","text":"","code":"if (FALSE) { try({ # first load in meet data meets <- bettRtab::load_race_meet_meta(2022)  # then filter to the race(s) meets wanted meet_dates_df <- meets %>%   filter(venueMnemonic == \"M\",          raceType == \"R\",          meetingDate == \"2022-01-01\")   # then get the URLs meet_url <- meet_dates_df$races[[1]] meet_url <- meet_url$`_links`$self[1]  out <- get_past_race_content(urls=meet_url) }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":null,"dir":"Reference","previous_headings":"","what":"Get past race content — get_past_races","title":"Get past race content — get_past_races","text":"Returns list race many races data including runners, markets, dividends pools Can either use function provide race API URL, use get_past_races get results. Note can return results many race meets. Can use parsing functions get data want lists.","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get past race content — get_past_races","text":"","code":"get_past_races(meet_date, venue_mnem, race_type, race_num = NULL)"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get past race content — get_past_races","text":"meet_date race meet date 'YYYY-MM-DD' format venue_mnem mnemonic track race_type type race, either R, H, G race_num integer race number. null,  races meet(s) returned","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get past race content — get_past_races","text":"returns list race's data including runners, markets, dividends pools","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get past race content — get_past_races","text":"","code":"if (FALSE) { try({ out <- get_past_races(meet_date = c('2022-09-03', '2022-09-10'),                      venue_mnem = 'M', race_type = 'R') }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Get race meet metadata — get_race_meet_meta","title":"Get race meet metadata — get_race_meet_meta","text":"Returns race meet details selected date(s)","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get race meet metadata — get_race_meet_meta","text":"","code":"get_race_meet_meta(race_dates)"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get race meet metadata — get_race_meet_meta","text":"race_dates vector dates YYYY-MM-DD format","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get race meet metadata — get_race_meet_meta","text":"returns dataframe race meet metadata","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get race meet metadata — get_race_meet_meta","text":"","code":"if (FALSE) { try({ dates <- seq(from = as.Date(\"2022-08-01\"), to=as.Date(\"2022-08-03\"), by=1) df <- get_race_meet_meta(race_dates=dates) }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all markets for selected competition — get_sports_market","title":"Get all markets for selected competition — get_sports_market","text":"Returns betting markets data selected TAB competition","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all markets for selected competition — get_sports_market","text":"","code":"get_sports_market(competition_name)"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all markets for selected competition — get_sports_market","text":"competition_name name TAB competition. Found competitions page selector","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all markets for selected competition — get_sports_market","text":"returns dataframe bets available selected competition","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all markets for selected competition — get_sports_market","text":"","code":"if (FALSE) { try({ df <- get_sports_market(\"Major League Baseball Futures\") }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Load race meet metadata — load_race_meet_meta","title":"Load race meet metadata — load_race_meet_meta","text":"Loading version get_race_meet_meta Returns race meets meta data whole calendar year","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load race meet metadata — load_race_meet_meta","text":"","code":"load_race_meet_meta(cal_year)"},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load race meet metadata — load_race_meet_meta","text":"cal_year calendar year get data ","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load race meet metadata — load_race_meet_meta","text":"returns dataframe race meets meta data selected calendar year","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load race meet metadata — load_race_meet_meta","text":"","code":"# \\donttest{ try({ df <- load_race_meet_meta(cal_year=2022) }) # }"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse race betting dividends — parse_dividends","title":"Parse race betting dividends — parse_dividends","text":"Returns data frame race's betting dividends function used parse output race lists get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse race betting dividends — parse_dividends","text":"","code":"parse_dividends(race_list)"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse race betting dividends — parse_dividends","text":"race_list output get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse race betting dividends — parse_dividends","text":"returns dataframe race betting dividends","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse race betting dividends — parse_dividends","text":"","code":"if (FALSE) { try({ races <- get_race_data(meet_date=\"2022-09-03\", venue_mnem=\"M\", race_type=\"R\", race_num=NULL) df <- parse_dividends(race_list=races) }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse race betting pools — parse_pools","title":"Parse race betting pools — parse_pools","text":"Returns data frame race's betting pools function used parse output race lists get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse race betting pools — parse_pools","text":"","code":"parse_pools(race_list)"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse race betting pools — parse_pools","text":"race_list output get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse race betting pools — parse_pools","text":"returns dataframe race meet betting pools","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse race betting pools — parse_pools","text":"","code":"if (FALSE) { try({ races <- get_race_data(meet_date=\"2022-09-03\", venue_mnem=\"M\", race_type=\"R\", race_num=NULL) df <- parse_pools(race_list=races) }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse race runners — parse_runners","title":"Parse race runners — parse_runners","text":"Returns data frame race's runners betting odds function used parse output race lists get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse race runners — parse_runners","text":"","code":"parse_runners(race_list)"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse race runners — parse_runners","text":"race_list output get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse race runners — parse_runners","text":"returns dataframe race meet runners","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse race runners — parse_runners","text":"","code":"if (FALSE) { try({ races <- get_race_data(meet_date=\"2022-09-03\", venue_mnem=\"M\", race_type=\"R\", race_num=NULL) df <- parse_runners(race_list=races) }) }"},{"path":[]},{"path":"https://jaseziv.github.io/bettRtab/news/index.html","id":"new-functions-development-version","dir":"Changelog","previous_headings":"","what":"New Functions","title":"bettRtab (development version)","text":"load_race_meet_meta() load pre-scraped race meet meta data get_past_race_content() get past race content using URLs get_past_races() get past race content using paremeters parse_runners() extract runners betting markets output get_past_race_content() get_past_races() parse_pools() extract betting pools output get_past_race_content() get_past_races() parse_dividends() extract dividends output get_past_race_content() get_past_races() get_race_meet_meta() get metadata race meets selected date(s) get_sports_market() get betting markets selected competition get_live_sports() get -play (live) sports markets (0.0.0.7000)","code":""}]
