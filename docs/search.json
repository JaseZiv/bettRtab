[{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting TAB betting data using bettRtab","text":"vignette outline ways functions bettRtab can used extract sports racing betting data TAB.","code":""},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting TAB betting data using bettRtab","text":"can install released version bettRtab GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"JaseZiv/bettRtab\") library(bettRtab) library(dplyr)"},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Getting TAB betting data using bettRtab","text":"functions package work without hitch locally, running automated way (GitHub Actions, cloud, etc) may lead requests blocked. get around , need access proxies need set configs start scripts similar following:","code":"httr::set_config(httr::use_proxy(url = Sys.getenv(\"PROXY_URL\"),                                  port = as.numeric(Sys.getenv(\"PROXY_PORT\")),                                  username =Sys.getenv(\"PROXY_USERNAME\"),                                  password= Sys.getenv(\"PROXY_PASSWORD\")))"},{"path":"https://jaseziv.github.io/bettRtab/articles/using-bettRtab.html","id":"sports-data","dir":"Articles","previous_headings":"Usage","what":"Sports Data","title":"Getting TAB betting data using bettRtab","text":"get betting data currently available competition market, use get_sports_market() function. get valid list values can pass competition_name parameter, look competitions.name column file . Alternatively, competition_name needed argument function can found competitions page selector TAB website. can inspect see betting markets available: can explore key markets… say want see odds relegation EPL:","code":"epl_futures <- get_sports_market(competition_name = \"English Premier League Futures\")  glimpse(epl_futures) #> Rows: 263 #> Columns: 33 #> $ marketId            <chr> \"68519348\", \"68519348\", \"68519348\", \"68519348\", \"6… #> $ marketName          <chr> \"EPL Winner 2022/23\", \"EPL Winner 2022/23\", \"EPL W… #> $ shortName           <chr> \"EPL Winner 2022/23\", \"EPL Winner 2022/23\", \"EPL W… #> $ betOption           <chr> \"Winner\", \"Winner\", \"Winner\", \"Winner\", \"Winner\", … #> $ betOptionSpectrumId <chr> \"52\", \"52\", \"52\", \"52\", \"52\", \"52\", \"52\", \"52\", \"5… #> $ betOptionPriority   <chr> \"90\", \"90\", \"90\", \"90\", \"90\", \"90\", \"90\", \"90\", \"9… #> $ marketUniqueId      <chr> \"68519348\", \"68519348\", \"68519348\", \"68519348\", \"6… #> $ closeTime           <chr> \"2022-09-16T19:00:00.000Z\", \"2022-09-16T19:00:00.0… #> $ marketBettingStatus <chr> \"Open\", \"Open\", \"Open\", \"Open\", \"Open\", \"Open\", \"O… #> $ isFuture            <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ onlineBetting       <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ phoneBettingOnly    <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ inPlay              <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ goingInPlay         <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ allowWin            <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ marketAllowPlace    <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ allowEachWay        <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ allowMulti          <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ allowMultiWin       <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ allowMultiPlace     <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ allowMultiEachWay   <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ numberOfPlaces      <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", … #> $ cashOutEligibility  <chr> \"Enabled\", \"Enabled\", \"Enabled\", \"Enabled\", \"Enabl… #> $ allowBundle         <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ id                  <chr> \"278385\", \"278386\", \"278390\", \"278389\", \"278388\", … #> $ name                <chr> \"Man City\", \"Liverpool\", \"Arsenal\", \"Tottenham\", \"… #> $ returnWin           <chr> \"1.32\", \"8\", \"13\", \"15\", \"21\", \"34\", \"126\", \"151\",… #> $ returnPlace         <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", … #> $ bettingStatus       <chr> \"Open\", \"Open\", \"Open\", \"Open\", \"Open\", \"Open\", \"O… #> $ allowPlace          <chr> \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALS… #> $ number              <chr> \"278385\", \"278386\", \"278390\", \"278389\", \"278388\", … #> $ isOpen              <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"TRUE\", \"T… #> $ sortOrder           <chr> \"1\", \"2\", \"6\", \"5\", \"4\", \"3\", \"10\", \"7\", \"8\", \"16\"… epl_futures %>%    select(betOption) %>% distinct() #>                              betOption #> 1                               Winner #> 2                      Top Goal Scorer #> 3                                Top 4 #> 4                           Relegation #> 5                                Top 2 #> 6                                Top 6 #> 7                   To Finish Top Half #> 8                  Team to Finish Last #> 9               Season Points Handicap #> 10 Winner without Liverpool & Man City #> 11                Winner without Big 6 #> 12               Big 6 To Be Relegated epl_futures %>%    filter(betOption == \"Relegation\") %>%    select(marketName, id, name, returnWin) #>                marketName     id              name returnWin #> 1  EPL Relegation 2022/23 228287       Bournemouth      1.42 #> 2  EPL Relegation 2022/23 228288 Nottingham Forest       1.8 #> 3  EPL Relegation 2022/23 228279         Leicester         3 #> 4  EPL Relegation 2022/23 228278           Everton      3.25 #> 5  EPL Relegation 2022/23 228284            Fulham      3.75 #> 6  EPL Relegation 2022/23 228285       Southampton      3.75 #> 7  EPL Relegation 2022/23 228286             Leeds       4.5 #> 8  EPL Relegation 2022/23 228277     Wolverhampton         5 #> 9  EPL Relegation 2022/23 228283       Aston Villa         6 #> 10 EPL Relegation 2022/23 228282         Brentford       6.5 #> 11 EPL Relegation 2022/23 228280    Crystal Palace        10 #> 12 EPL Relegation 2022/23 228275          West Ham        15 #> 13 EPL Relegation 2022/23 228276         Newcastle        41 #> 14 EPL Relegation 2022/23 228281          Brighton        51 #> 15 EPL Relegation 2022/23 228272           Man Utd       151 #> 16 EPL Relegation 2022/23 228271           Chelsea       501 #> 17 EPL Relegation 2022/23 228270         Liverpool      1001 #> 18 EPL Relegation 2022/23 228274           Arsenal      1001 #> 19 EPL Relegation 2022/23 228273         Tottenham      1501 #> 20 EPL Relegation 2022/23 228269          Man City      3001"},{"path":[]},{"path":"https://jaseziv.github.io/bettRtab/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jason Zivkovic. Author, maintainer, copyright holder.","code":""},{"path":"https://jaseziv.github.io/bettRtab/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zivkovic J (2022). bettRtab: API wrapper interact betting company TAB. https://github.com/JaseZiv/bettRtab, https://jaseziv.github.io/bettRtab/.","code":"@Manual{,   title = {bettRtab: API wrapper to interact with the betting company TAB},   author = {Jason Zivkovic},   year = {2022},   note = {https://github.com/JaseZiv/bettRtab, https://jaseziv.github.io/bettRtab/}, }"},{"path":[]},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"API wrapper to interact with the betting company TAB","text":"package designed allow users obtain clean tidy TAB betting markets racing sports. gives users ability access data efficiently.","code":""},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"future-plans","dir":"","previous_headings":"Overview","what":"Future Plans","title":"API wrapper to interact with the betting company TAB","text":"hope expand allow interacting betting API - potentially giving users ability place bets API. , ’m still waiting TAB Digital Team respond request access token able test functions.","code":""},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"API wrapper to interact with the betting company TAB","text":"can install released version bettRtab GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"JaseZiv/bettRtab\")"},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"API wrapper to interact with the betting company TAB","text":"functions package work without hitch locally, running automated way (GitHub Actions, cloud, etc) may lead requests blocked. get around , need access proxies need set configs start scripts similar following:","code":"httr::set_config(httr::use_proxy(url = Sys.getenv(\"PROXY_URL\"),                                  port = as.numeric(Sys.getenv(\"PROXY_PORT\")),                                  username =Sys.getenv(\"PROXY_USERNAME\"),                                  password= Sys.getenv(\"PROXY_PASSWORD\")))"},{"path":[]},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"issues-and-improvements","dir":"","previous_headings":"Contributing","what":"Issues and Improvements","title":"API wrapper to interact with the betting company TAB","text":"creating issue, please include: Reproducible examples brief description expected results improvement suggestions, features requested purpose Feel free get touch via email twitter https://twitter.com/jaseziv aren’t able create issue.","code":""},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"show-your-support","dir":"","previous_headings":"Contributing","what":"Show your support","title":"API wrapper to interact with the betting company TAB","text":"Follow Twitter (jaseziv) updates package helps , ask star repo","code":""},{"path":"https://jaseziv.github.io/bettRtab/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"API wrapper to interact with the betting company TAB","text":"Image used logo comes shutterstock","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Get past race content (with URL) — get_past_race_content","title":"Get past race content (with URL) — get_past_race_content","text":"Returns list race's data including runners, markets, dividends pools Can either use function provide race API URL, use get_past_races get results. Note can return results multiple race meet URL time. See vignette example details get race API URLs. Can use parsing functions get data want lists.","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get past race content (with URL) — get_past_race_content","text":"","code":"get_past_race_content(urls)"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get past race content (with URL) — get_past_race_content","text":"urls API url character race needed","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get past race content (with URL) — get_past_race_content","text":"returns list race's data including runners, markets, dividends pools","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_race_content.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get past race content (with URL) — get_past_race_content","text":"","code":"if (FALSE) { try({ # first load in meet data meets <- bettRtab::load_race_meet_meta(2022)  # then filter to the race(s) meets wanted meet_dates_df <- meets %>%   filter(venueMnemonic == \"M\",          raceType == \"R\",          meetingDate == \"2022-01-01\")   # then get the URLs meet_url <- meet_dates_df$races[[1]] meet_url <- meet_url$`_links`$self[1]  out <- get_past_race_content(urls=meet_url) }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":null,"dir":"Reference","previous_headings":"","what":"Get past race content — get_past_races","title":"Get past race content — get_past_races","text":"Returns list race many races data including runners, markets, dividends pools Can either use function provide race API URL, use get_past_races get results. Note can return results many race meets. Can use parsing functions get data want lists.","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get past race content — get_past_races","text":"","code":"get_past_races(meet_date, venue_mnem, race_type, race_num = NULL)"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get past race content — get_past_races","text":"meet_date race meet date 'YYYY-MM-DD' format venue_mnem mnemonic track race_type type race, either R, H, G race_num integer race number. null,  races meet(s) returned","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get past race content — get_past_races","text":"returns list race's data including runners, markets, dividends pools","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_past_races.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get past race content — get_past_races","text":"","code":"if (FALSE) { try({ out <- get_past_races(meet_date = c('2022-09-03', '2022-09-10'),                      venue_mnem = 'M', race_type = 'R') }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Get race meet metadata — get_race_meet_meta","title":"Get race meet metadata — get_race_meet_meta","text":"Returns race meet details selected date(s)","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get race meet metadata — get_race_meet_meta","text":"","code":"get_race_meet_meta(race_dates)"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get race meet metadata — get_race_meet_meta","text":"race_dates vector dates YYYY-MM-DD format","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get race meet metadata — get_race_meet_meta","text":"returns dataframe race meet metadata","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_race_meet_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get race meet metadata — get_race_meet_meta","text":"","code":"if (FALSE) { try({ dates <- seq(from = as.Date(\"2022-08-01\"), to=as.Date(\"2022-08-03\"), by=1) df <- get_race_meet_meta(race_dates=dates) }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all markets fr selected competition — get_sports_market","title":"Get all markets fr selected competition — get_sports_market","text":"Returns betting markets data selected TAB competition","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all markets fr selected competition — get_sports_market","text":"","code":"get_sports_market(competition_name)"},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all markets fr selected competition — get_sports_market","text":"competition_name name TAB competition. Found competitions page selector","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all markets fr selected competition — get_sports_market","text":"returns dataframe bets available selected competition","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/get_sports_market.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all markets fr selected competition — get_sports_market","text":"","code":"if (FALSE) { try({ df <- get_sports_market(\"Major League Baseball Futures\") }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Load race meet metadata — load_race_meet_meta","title":"Load race meet metadata — load_race_meet_meta","text":"Loading version get_race_meet_meta Returns race meets meta data whole calendar year","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load race meet metadata — load_race_meet_meta","text":"","code":"load_race_meet_meta(cal_year)"},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load race meet metadata — load_race_meet_meta","text":"cal_year calendar year get data ","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load race meet metadata — load_race_meet_meta","text":"returns dataframe race meets meta data selected calendar year","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/load_race_meet_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load race meet metadata — load_race_meet_meta","text":"","code":"# \\donttest{ try({ df <- load_race_meet_meta(cal_year=2022) }) # }"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse race betting dividends — parse_dividends","title":"Parse race betting dividends — parse_dividends","text":"Returns data frame race's betting dividends function used parse output race lists get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse race betting dividends — parse_dividends","text":"","code":"parse_dividends(race_list)"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse race betting dividends — parse_dividends","text":"race_list output get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse race betting dividends — parse_dividends","text":"returns dataframe race betting dividends","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_dividends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse race betting dividends — parse_dividends","text":"","code":"if (FALSE) { try({ races <- get_race_data(meet_date=\"2022-09-03\", venue_mnem=\"M\", race_type=\"R\", race_num=NULL) df <- parse_dividends(race_list=races) }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse race betting pools — parse_pools","title":"Parse race betting pools — parse_pools","text":"Returns data frame race's betting pools function used parse output race lists get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse race betting pools — parse_pools","text":"","code":"parse_pools(race_list)"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse race betting pools — parse_pools","text":"race_list output get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse race betting pools — parse_pools","text":"returns dataframe race meet betting pools","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_pools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse race betting pools — parse_pools","text":"","code":"if (FALSE) { try({ races <- get_race_data(meet_date=\"2022-09-03\", venue_mnem=\"M\", race_type=\"R\", race_num=NULL) df <- parse_pools(race_list=races) }) }"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse race runners — parse_runners","title":"Parse race runners — parse_runners","text":"Returns data frame race's runners betting odds function used parse output race lists get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse race runners — parse_runners","text":"","code":"parse_runners(race_list)"},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse race runners — parse_runners","text":"race_list output get_past_race_content get_past_races","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse race runners — parse_runners","text":"returns dataframe race meet runners","code":""},{"path":"https://jaseziv.github.io/bettRtab/reference/parse_runners.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse race runners — parse_runners","text":"","code":"if (FALSE) { try({ races <- get_race_data(meet_date=\"2022-09-03\", venue_mnem=\"M\", race_type=\"R\", race_num=NULL) df <- parse_runners(race_list=races) }) }"},{"path":[]},{"path":"https://jaseziv.github.io/bettRtab/news/index.html","id":"new-functions-development-version","dir":"Changelog","previous_headings":"","what":"New Functions","title":"bettRtab (development version)","text":"load_race_meet_meta() load pre-scraped race meet meta data get_past_race_content() get past race content using URLs get_past_races() get past race content using paremeters parse_runners() extract runners betting markets output get_past_race_content() get_past_races() parse_pools() extract betting pools output get_past_race_content() get_past_races() parse_dividends() extract dividends output get_past_race_content() get_past_races() get_race_meet_meta() get metadata race meets selected date(s) get_sports_market() get betting markets selected competition","code":""}]
